// Generated by CoffeeScript 1.7.1
(function() {
  var assert, should;

  assert = require("assert");

  should = require("should");

  suite("methods", function() {
    var resultt, systemResults, systemm, trunc, _results;
    trunc = function(obj) {
      var key, temp;
      if ((obj == null) || typeof obj !== "object") {
        return obj.toString().substr(0, 5);
      }
      temp = obj.constructor();
      for (key in obj) {
        temp[key] = trunc(obj[key]);
      }
      return temp;
    };
    systemResults = {
      plurality: [[0], [4, 2, 3]],
      approval: [[1, 2], [4, 5, 5]],
      GMJ: [[2], [2 / 5, 8 / 3, 11 / 4]],
      IRV: [[2], [[1, 1, 1, 1], 1, [1, 1, 1, 1, 1]]],
      MAV: [[2], [1 / 7, 47 / 17, 23 / 8]],
      condorcet: [[1], ["beats 0 others; worst margin -1", "beats 2 others; worst margin 1", "beats 1 others; worst margin -3"]],
      borda: [[1], [8, 11, 8]],
      score: [[1], [40, 52, 46]],
      SODA: [[1], ["4 + 0", "2 + 7", "3 + 2"]]
    };
    _results = [];
    for (systemm in systemResults) {
      resultt = systemResults[systemm];
      _results.push((function(system, result) {
        return test(system, function(done, server) {
          server["eval"](function(system) {
            return emit("result" + system, Methods[system].resolveHonestVotes(Scenarios.chicken));
          }, system);
          return server.once("result" + system, function(r) {
            trunc(r).should.eql(trunc(result), "system failed:" + system);
            return done();
          });
        });
      })(systemm, resultt));
    }
    return _results;
  });

  suite("integrations", function() {
    return test("two clients", function(done, server, c1, c2) {
      assert.equal(1, 2);
      return done();
    });
  });

}).call(this);
